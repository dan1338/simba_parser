#include <gtest/gtest.h>

#include "proto/packet_parser.h"
#include "proto/udp.h"

using namespace proto;

static constexpr unsigned char packet_dump[] = {
    0x80, 0xa3, 0x4e, 0x76, 0x0, 0x48, 0xb7, 0xc8,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

static constexpr auto src_port = 32931;
static constexpr auto dst_port = 20086;
static constexpr auto length = 72;
static constexpr auto checksum = 0xb7c8;

TEST(TestUdp, ParsePacket)
{
    const auto udp_packet{PacketParser(RawPacket{packet_dump}).parse<Udp>()};

    EXPECT_TRUE(udp_packet.has_value());

    EXPECT_EQ(udp_packet->header.src_port, src_port);
    EXPECT_EQ(udp_packet->header.dst_port, dst_port);
    EXPECT_EQ(udp_packet->header.length, length);
    EXPECT_EQ(udp_packet->header.checksum, checksum);

    EXPECT_EQ(udp_packet->data.size(), length - 8);
}
